#!/bin/bash
# Proxmox Backup Storage Emergency Cleanup Script
# Generated by Proxmox Agent - High Priority Optimization

echo "🚨 CRITICAL: Emergency Backup Storage Cleanup"
echo "============================================="

# Function to show backup storage usage
show_backup_usage() {
    echo "📊 Current backup storage usage:"
    df -h /var/lib/vz/dump 2>/dev/null || echo "Backup storage location not found at /var/lib/vz/dump"
    echo ""
}

echo "📊 BEFORE CLEANUP:"
show_backup_usage

# Find backup storage location
BACKUP_LOCATIONS=(
    "/var/lib/vz/dump"
    "/mnt/pve/Backups"
    "/Backups"
    "/backup"
)

BACKUP_DIR=""
for location in "${BACKUP_LOCATIONS[@]}"; do
    if [ -d "$location" ]; then
        BACKUP_DIR="$location"
        echo "✅ Found backup directory: $BACKUP_DIR"
        break
    fi
done

if [ -z "$BACKUP_DIR" ]; then
    echo "❌ Could not locate backup directory. Please check manually."
    echo "Common locations:"
    for location in "${BACKUP_LOCATIONS[@]}"; do
        echo "   $location"
    done
    exit 1
fi

cd "$BACKUP_DIR" || exit 1

echo ""
echo "🔍 Analyzing backup files in $BACKUP_DIR..."

# Show current backup files by age
echo "📋 Current backup files:"
ls -lhat *.{tar,tar.gz,tar.lzo,vma,vma.gz,vma.lzo} 2>/dev/null | head -20

echo ""
echo "📊 Backup files by size:"
du -sh *.{tar,tar.gz,tar.lzo,vma,vma.gz,vma.lzo} 2>/dev/null | sort -hr | head -10

echo ""
echo "🗑️ PHASE 1: Remove backups older than 60 days (SAFE)"
find . -name "*.tar.gz" -mtime +60 -ls
find . -name "*.tar.lzo" -mtime +60 -ls
find . -name "*.vma.gz" -mtime +60 -ls
find . -name "*.vma.lzo" -mtime +60 -ls

# Count files to be deleted
OLD_COUNT=$(find . -name "*.tar.gz" -mtime +60 | wc -l)
OLD_COUNT=$((OLD_COUNT + $(find . -name "*.tar.lzo" -mtime +60 | wc -l)))
OLD_COUNT=$((OLD_COUNT + $(find . -name "*.vma.gz" -mtime +60 | wc -l)))
OLD_COUNT=$((OLD_COUNT + $(find . -name "*.vma.lzo" -mtime +60 | wc -l)))

echo "📊 Files to delete (>60 days): $OLD_COUNT"

if [ $OLD_COUNT -gt 0 ]; then
    echo "🗑️ Deleting old backup files..."
    find . -name "*.tar.gz" -mtime +60 -delete
    find . -name "*.tar.lzo" -mtime +60 -delete  
    find . -name "*.vma.gz" -mtime +60 -delete
    find . -name "*.vma.lzo" -mtime +60 -delete
    echo "✅ Deleted $OLD_COUNT old backup files"
else
    echo "ℹ️ No backups older than 60 days found"
fi

echo ""
show_backup_usage

echo ""
echo "🗑️ PHASE 2: Remove backup logs older than 30 days"
find . -name "*.log" -mtime +30 -delete 2>/dev/null
find . -name "*.tmp" -mtime +7 -delete 2>/dev/null

echo ""
show_backup_usage

# If still critical, suggest manual review
USAGE=$(df "$BACKUP_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$USAGE" -gt 95 ]; then
    echo ""
    echo "⚠️ STILL CRITICAL: Backup storage still >95% full"
    echo "Manual review required:"
    echo ""
    echo "📋 Largest remaining files:"
    du -sh * 2>/dev/null | sort -hr | head -10
    echo ""
    echo "🔍 Consider removing:"
    echo "   1. Backups older than 30 days (if safe for your retention policy)"
    echo "   2. Failed backup attempts"
    echo "   3. Temporary files"
    echo ""
    echo "⚠️ Commands for manual cleanup (USE WITH CAUTION):"
    echo "   find . -name '*.tar.gz' -mtime +30 -ls    # List 30+ day old backups"
    echo "   find . -name '*.tar.gz' -mtime +30 -delete # Delete 30+ day old backups"
elif [ "$USAGE" -gt 85 ]; then
    echo ""
    echo "🟡 WARNING: Backup storage still high ($USAGE% full)"
    echo "Consider implementing automated retention policy"
else
    echo ""
    echo "✅ SUCCESS: Backup storage usage now acceptable ($USAGE% full)"
fi

echo ""
echo "📊 FINAL BACKUP STORAGE STATUS:"
show_backup_usage

echo ""
echo "🎉 Backup cleanup completed!"
echo "📋 Next steps:"
echo "   1. Implement automated backup retention policy"
echo "   2. Monitor backup storage regularly"
echo "   3. Consider expanding backup storage if needed"
