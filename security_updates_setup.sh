#!/bin/bash
# Proxmox Automated Security Updates Setup
# Generated by Proxmox Agent - High Priority Optimization

echo "🔒 Setting up Automated Security Updates"
echo "========================================"

# Install unattended-upgrades if not present
if ! dpkg -l | grep -q unattended-upgrades; then
    echo "📦 Installing unattended-upgrades..."
    apt update
    apt install -y unattended-upgrades apt-listchanges
else
    echo "✅ unattended-upgrades already installed"
fi

# Configure unattended-upgrades
echo "⚙️ Configuring automated security updates..."

# Backup original config
cp /etc/apt/apt.conf.d/50unattended-upgrades /etc/apt/apt.conf.d/50unattended-upgrades.backup 2>/dev/null

# Create optimized configuration
cat > /etc/apt/apt.conf.d/50unattended-upgrades << 'EOF'
// Automatically upgrade packages from these (origin:archive) pairs
Unattended-Upgrade::Allowed-Origins {
    "${distro_id}:${distro_codename}";
    "${distro_id}:${distro_codename}-security";
    "${distro_id}:${distro_codename}-updates";
    "${distro_id}ESMApps:${distro_codename}-apps-security";
    "${distro_id}ESM:${distro_codename}-infra-security";
    "Proxmox:${distro_codename}";
};

// Python regular expressions, matching packages to exclude from upgrading
Unattended-Upgrade::Package-Blacklist {
    // Exclude kernel updates (require manual testing)
    "linux-.*";
    ".*-kernel-.*";
    
    // Exclude Proxmox packages that need manual testing
    "pve-kernel-.*";
    "proxmox-ve";
    "pve-manager";
};

// Send email to this address for problems or packages upgrades
Unattended-Upgrade::Mail "root";

// Set to true to get emails only on errors
Unattended-Upgrade::MailReport "on-change";

// Remove unused automatically installed kernel-related packages
Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";

// Remove new unused dependencies after the upgrade
Unattended-Upgrade::Remove-New-Unused-Dependencies "true";

// Remove unused dependencies after the upgrade
Unattended-Upgrade::Remove-Unused-Dependencies "true";

// Automatically reboot *WITHOUT CONFIRMATION* if the file /var/run/reboot-required exists after the upgrade
Unattended-Upgrade::Automatic-Reboot "false";

// If automatic reboot is enabled, reboot at this time
Unattended-Upgrade::Automatic-Reboot-Time "02:00";

// Enable logging to syslog
Unattended-Upgrade::SyslogEnable "true";
EOF

# Configure auto-upgrades
echo "⚙️ Enabling automatic security updates..."
cat > /etc/apt/apt.conf.d/20auto-upgrades << 'EOF'
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
EOF

# Test the configuration
echo "🧪 Testing unattended-upgrades configuration..."
unattended-upgrades --dry-run --debug

# Set up container auto-updates (where appropriate)
echo ""
echo "📦 Setting up container security updates..."

# Create container update script
cat > /usr/local/bin/container-security-updates.sh << 'EOF'
#!/bin/bash
# Container Security Updates Script

LOG_FILE="/var/log/container-updates.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

log_message() {
    echo "[$DATE] $1" | tee -a "$LOG_FILE"
}

# Safe containers for auto-updates (exclude databases and complex apps)
SAFE_CONTAINERS=(
    105  # nginxproxymanager
    107  # gotify
    109  # uptimekuma
    110  # homepage
    113  # lldap
    120  # alpine-it-tools
    125  # adguard
)

log_message "Starting container security updates"

for ctid in "${SAFE_CONTAINERS[@]}"; do
    if pct status $ctid | grep -q "running"; then
        log_message "Updating container $ctid"
        
        # Determine container OS and update accordingly
        if pct exec $ctid -- which apt >/dev/null 2>&1; then
            # Debian/Ubuntu based
            pct exec $ctid -- apt update
            pct exec $ctid -- apt upgrade -y
        elif pct exec $ctid -- which apk >/dev/null 2>&1; then
            # Alpine based
            pct exec $ctid -- apk update
            pct exec $ctid -- apk upgrade
        fi
        
        log_message "Completed updates for container $ctid"
    else
        log_message "Container $ctid is not running, skipping"
    fi
done

log_message "Container security updates completed"
EOF

chmod +x /usr/local/bin/container-security-updates.sh

# Add to cron (weekly container updates)
echo "⏰ Setting up automated schedules..."
cat > /etc/cron.d/security-updates << 'EOF'
# Proxmox Security Updates Automation
# Run container updates weekly on Sunday at 3 AM
0 3 * * 0 root /usr/local/bin/container-security-updates.sh
EOF

echo ""
echo "✅ Automated security updates configured!"
echo ""
echo "📋 Summary:"
echo "   - Host security updates: Enabled (daily check)"
echo "   - Container updates: Weekly schedule (safe containers only)"
echo "   - Logs: /var/log/unattended-upgrades/ and /var/log/container-updates.log"
echo "   - Email notifications: Enabled for root user"
echo ""
echo "⚠️ Important notes:"
echo "   - Kernel updates excluded (require manual testing)"
echo "   - Complex containers (databases) excluded from auto-updates"
echo "   - No automatic reboots configured"
echo ""
echo "🔍 Monitor with:"
echo "   cat /var/log/unattended-upgrades/unattended-upgrades.log"
echo "   cat /var/log/container-updates.log"
